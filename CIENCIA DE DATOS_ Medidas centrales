{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO2s/ZKr5qZBi6swX2wwYMo"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"2GQHQIRGg_u9"},"outputs":[],"source":[]},{"cell_type":"markdown","source":["#trabajando con medidas centrales\n","###1. cómo analizar dataframes\n","###2. overview de los datos\n","###3. Obtener las medidas centrales\n","###4. Analizar las gráficas\n"],"metadata":{"id":"Wxy5DnrChpWI"}},{"cell_type":"code","source":["!pip install statsmodels\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2LlZrwYYiBPi","executionInfo":{"status":"ok","timestamp":1741634993234,"user_tz":300,"elapsed":8464,"user":{"displayName":"DANNA PAULETH LOPEZ ACOSTA","userId":"01609972287466563207"}},"outputId":"72d3439a-2fe1-41ae-cce6-05ac50214454"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: statsmodels in /usr/local/lib/python3.11/dist-packages (0.14.4)\n","Requirement already satisfied: numpy<3,>=1.22.3 in /usr/local/lib/python3.11/dist-packages (from statsmodels) (1.26.4)\n","Requirement already satisfied: scipy!=1.9.2,>=1.8 in /usr/local/lib/python3.11/dist-packages (from statsmodels) (1.13.1)\n","Requirement already satisfied: pandas!=2.1.0,>=1.4 in /usr/local/lib/python3.11/dist-packages (from statsmodels) (2.2.2)\n","Requirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.11/dist-packages (from statsmodels) (1.0.1)\n","Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.11/dist-packages (from statsmodels) (24.2)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas!=2.1.0,>=1.4->statsmodels) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas!=2.1.0,>=1.4->statsmodels) (2025.1)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas!=2.1.0,>=1.4->statsmodels) (2025.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas!=2.1.0,>=1.4->statsmodels) (1.17.0)\n"]}]},{"cell_type":"code","source":["!pip install wquantiles"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"68SLgnmsiSj_","executionInfo":{"status":"ok","timestamp":1741635079099,"user_tz":300,"elapsed":3121,"user":{"displayName":"DANNA PAULETH LOPEZ ACOSTA","userId":"01609972287466563207"}},"outputId":"79b11443-6cad-4dc1-86e6-db83892248fe"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting wquantiles\n","  Downloading wquantiles-0.6-py3-none-any.whl.metadata (1.1 kB)\n","Requirement already satisfied: numpy>=1.18 in /usr/local/lib/python3.11/dist-packages (from wquantiles) (1.26.4)\n","Downloading wquantiles-0.6-py3-none-any.whl (3.3 kB)\n","Installing collected packages: wquantiles\n","Successfully installed wquantiles-0.6\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from scipy.stats import trim_mean\n","from statsmodels import robust\n","import wquantiles\n","import seaborn as sns\n","import matplotlib.pyplot as plt"],"metadata":{"id":"GMHcY3Xeilqg","executionInfo":{"status":"ok","timestamp":1741635304631,"user_tz":300,"elapsed":608,"user":{"displayName":"DANNA PAULETH LOPEZ ACOSTA","userId":"01609972287466563207"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["estado=pd.read_csv(\"/content/state.csv\")"],"metadata":{"id":"JEsv9AG4j_zh","executionInfo":{"status":"ok","timestamp":1741635512698,"user_tz":300,"elapsed":24,"user":{"displayName":"DANNA PAULETH LOPEZ ACOSTA","userId":"01609972287466563207"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["#Ver los primeros 5 registros\n","estado.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"Ga-txW8Mke2E","executionInfo":{"status":"ok","timestamp":1741635604472,"user_tz":300,"elapsed":60,"user":{"displayName":"DANNA PAULETH LOPEZ ACOSTA","userId":"01609972287466563207"}},"outputId":"140f7b24-ca53-4ea7-9523-806a1957165b"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        State  Population  Murder.Rate Abbreviation\n","0     Alabama     4779736          5.7           AL\n","1      Alaska      710231          5.6           AK\n","2     Arizona     6392017          4.7           AZ\n","3    Arkansas     2915918          5.6           AR\n","4  California    37253956          4.4           CA"],"text/html":["\n","  <div id=\"df-33d51769-8b92-4b10-a6b6-28f0f18cbf73\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>State</th>\n","      <th>Population</th>\n","      <th>Murder.Rate</th>\n","      <th>Abbreviation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Alabama</td>\n","      <td>4779736</td>\n","      <td>5.7</td>\n","      <td>AL</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Alaska</td>\n","      <td>710231</td>\n","      <td>5.6</td>\n","      <td>AK</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Arizona</td>\n","      <td>6392017</td>\n","      <td>4.7</td>\n","      <td>AZ</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Arkansas</td>\n","      <td>2915918</td>\n","      <td>5.6</td>\n","      <td>AR</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>California</td>\n","      <td>37253956</td>\n","      <td>4.4</td>\n","      <td>CA</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-33d51769-8b92-4b10-a6b6-28f0f18cbf73')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-33d51769-8b92-4b10-a6b6-28f0f18cbf73 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-33d51769-8b92-4b10-a6b6-28f0f18cbf73');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-01dff18e-6532-4f44-bf38-d92d6b712b3c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-01dff18e-6532-4f44-bf38-d92d6b712b3c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-01dff18e-6532-4f44-bf38-d92d6b712b3c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"estado","summary":"{\n  \"name\": \"estado\",\n  \"rows\": 50,\n  \"fields\": [\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"Indiana\",\n          \"South Carolina\",\n          \"New Mexico\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6848235,\n        \"min\": 563626,\n        \"max\": 37253956,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          6483802,\n          4625364,\n          2059179\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Murder.Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.915736124302923,\n        \"min\": 0.9,\n        \"max\": 10.3,\n        \"num_unique_values\": 34,\n        \"samples\": [\n          1.6,\n          6.6,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Abbreviation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"IN\",\n          \"SC\",\n          \"NM\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["#Ver los ultimos 4 registros\n","estado.tail(4)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":175},"id":"IBSQZ3HDk6iL","executionInfo":{"status":"ok","timestamp":1741635716374,"user_tz":300,"elapsed":31,"user":{"displayName":"DANNA PAULETH LOPEZ ACOSTA","userId":"01609972287466563207"}},"outputId":"04e27d14-57f9-4a08-a151-f53a54926c88"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            State  Population  Murder.Rate Abbreviation\n","46     Washington     6724540          2.5           WA\n","47  West Virginia     1852994          4.0           WV\n","48      Wisconsin     5686986          2.9           WI\n","49        Wyoming      563626          2.7           WY"],"text/html":["\n","  <div id=\"df-905ac7b1-e946-4cab-add5-e0d6ea508cf9\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>State</th>\n","      <th>Population</th>\n","      <th>Murder.Rate</th>\n","      <th>Abbreviation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>46</th>\n","      <td>Washington</td>\n","      <td>6724540</td>\n","      <td>2.5</td>\n","      <td>WA</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>West Virginia</td>\n","      <td>1852994</td>\n","      <td>4.0</td>\n","      <td>WV</td>\n","    </tr>\n","    <tr>\n","      <th>48</th>\n","      <td>Wisconsin</td>\n","      <td>5686986</td>\n","      <td>2.9</td>\n","      <td>WI</td>\n","    </tr>\n","    <tr>\n","      <th>49</th>\n","      <td>Wyoming</td>\n","      <td>563626</td>\n","      <td>2.7</td>\n","      <td>WY</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-905ac7b1-e946-4cab-add5-e0d6ea508cf9')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-905ac7b1-e946-4cab-add5-e0d6ea508cf9 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-905ac7b1-e946-4cab-add5-e0d6ea508cf9');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-53544ff4-d283-40dd-a2e1-a4e9f78022b4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-53544ff4-d283-40dd-a2e1-a4e9f78022b4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-53544ff4-d283-40dd-a2e1-a4e9f78022b4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"estado\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"West Virginia\",\n          \"Wyoming\",\n          \"Washington\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2963333,\n        \"min\": 563626,\n        \"max\": 6724540,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1852994,\n          563626,\n          6724540\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Murder.Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6701989754294366,\n        \"min\": 2.5,\n        \"max\": 4.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4.0,\n          2.7,\n          2.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Abbreviation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"WV\",\n          \"WY\",\n          \"WA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["#Ver muestreo de 10 registros\n","estado.sample(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"TIXmEC-YlCXH","executionInfo":{"status":"ok","timestamp":1741635755248,"user_tz":300,"elapsed":26,"user":{"displayName":"DANNA PAULETH LOPEZ ACOSTA","userId":"01609972287466563207"}},"outputId":"1e342650-eb92-4f62-d31b-79fa3c1f716f"},"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            State  Population  Murder.Rate Abbreviation\n","23    Mississippi     2967297          8.6           MS\n","33   North Dakota      672591          3.0           ND\n","37   Pennsylvania    12702379          4.8           PA\n","48      Wisconsin     5686986          2.9           WI\n","12       Illinois    12830632          5.3           IL\n","21       Michigan     9883640          5.4           MI\n","28  New Hampshire     1316470          0.9           NH\n","17      Louisiana     4533372         10.3           LA\n","20  Massachusetts     6547629          2.0           MA\n","42          Texas    25145561          4.4           TX"],"text/html":["\n","  <div id=\"df-a0f62f97-cd92-4039-bca7-2a242346631a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>State</th>\n","      <th>Population</th>\n","      <th>Murder.Rate</th>\n","      <th>Abbreviation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>23</th>\n","      <td>Mississippi</td>\n","      <td>2967297</td>\n","      <td>8.6</td>\n","      <td>MS</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>North Dakota</td>\n","      <td>672591</td>\n","      <td>3.0</td>\n","      <td>ND</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>Pennsylvania</td>\n","      <td>12702379</td>\n","      <td>4.8</td>\n","      <td>PA</td>\n","    </tr>\n","    <tr>\n","      <th>48</th>\n","      <td>Wisconsin</td>\n","      <td>5686986</td>\n","      <td>2.9</td>\n","      <td>WI</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>Illinois</td>\n","      <td>12830632</td>\n","      <td>5.3</td>\n","      <td>IL</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>Michigan</td>\n","      <td>9883640</td>\n","      <td>5.4</td>\n","      <td>MI</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>New Hampshire</td>\n","      <td>1316470</td>\n","      <td>0.9</td>\n","      <td>NH</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>Louisiana</td>\n","      <td>4533372</td>\n","      <td>10.3</td>\n","      <td>LA</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>Massachusetts</td>\n","      <td>6547629</td>\n","      <td>2.0</td>\n","      <td>MA</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>Texas</td>\n","      <td>25145561</td>\n","      <td>4.4</td>\n","      <td>TX</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a0f62f97-cd92-4039-bca7-2a242346631a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a0f62f97-cd92-4039-bca7-2a242346631a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a0f62f97-cd92-4039-bca7-2a242346631a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-78791ae6-1fc7-4bc0-891e-def37dc26433\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-78791ae6-1fc7-4bc0-891e-def37dc26433')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-78791ae6-1fc7-4bc0-891e-def37dc26433 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"estado\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"State\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"Massachusetts\",\n          \"North Dakota\",\n          \"Michigan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7345508,\n        \"min\": 672591,\n        \"max\": 25145561,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          6547629,\n          672591,\n          9883640\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Murder.Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.893364055136435,\n        \"min\": 0.9,\n        \"max\": 10.3,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          2.0,\n          3.0,\n          5.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Abbreviation\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 10,\n        \"samples\": [\n          \"MA\",\n          \"ND\",\n          \"MI\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":26}]},{"cell_type":"markdown","source":["2. Overview de los datos"],"metadata":{"id":"L1CV2wZTmDsu"}},{"cell_type":"code","source":["estado.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BiihmLAYmY52","executionInfo":{"status":"ok","timestamp":1741636092993,"user_tz":300,"elapsed":51,"user":{"displayName":"DANNA PAULETH LOPEZ ACOSTA","userId":"01609972287466563207"}},"outputId":"4514fbee-75a1-4217-e0ca-f60119caa3c6"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 50 entries, 0 to 49\n","Data columns (total 4 columns):\n"," #   Column        Non-Null Count  Dtype  \n","---  ------        --------------  -----  \n"," 0   State         50 non-null     object \n"," 1   Population    50 non-null     int64  \n"," 2   Murder.Rate   50 non-null     float64\n"," 3   Abbreviation  50 non-null     object \n","dtypes: float64(1), int64(1), object(2)\n","memory usage: 1.7+ KB\n"]}]},{"cell_type":"code","source":["estado.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"jU41cTWbmgq5","executionInfo":{"status":"ok","timestamp":1741636128393,"user_tz":300,"elapsed":58,"user":{"displayName":"DANNA PAULETH LOPEZ ACOSTA","userId":"01609972287466563207"}},"outputId":"825f5119-3304-40bc-c851-98a0e3a3573d"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         Population  Murder.Rate\n","count  5.000000e+01    50.000000\n","mean   6.162876e+06     4.066000\n","std    6.848235e+06     1.915736\n","min    5.636260e+05     0.900000\n","25%    1.833004e+06     2.425000\n","50%    4.436370e+06     4.000000\n","75%    6.680312e+06     5.550000\n","max    3.725396e+07    10.300000"],"text/html":["\n","  <div id=\"df-918f0438-d3e5-40bb-88f6-4995e6abdc67\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Population</th>\n","      <th>Murder.Rate</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>5.000000e+01</td>\n","      <td>50.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>6.162876e+06</td>\n","      <td>4.066000</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>6.848235e+06</td>\n","      <td>1.915736</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>5.636260e+05</td>\n","      <td>0.900000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>1.833004e+06</td>\n","      <td>2.425000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>4.436370e+06</td>\n","      <td>4.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>6.680312e+06</td>\n","      <td>5.550000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>3.725396e+07</td>\n","      <td>10.300000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-918f0438-d3e5-40bb-88f6-4995e6abdc67')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-918f0438-d3e5-40bb-88f6-4995e6abdc67 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-918f0438-d3e5-40bb-88f6-4995e6abdc67');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f4dacd0a-e28a-4f55-9eee-b12734ae8faf\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f4dacd0a-e28a-4f55-9eee-b12734ae8faf')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f4dacd0a-e28a-4f55-9eee-b12734ae8faf button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"estado\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Population\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12143552.805767782,\n        \"min\": 50.0,\n        \"max\": 37253956.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6162876.3,\n          4436369.5,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Murder.Rate\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 16.46017669001848,\n        \"min\": 0.9,\n        \"max\": 50.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4.066,\n          4.0,\n          50.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":29}]},{"cell_type":"markdown","source":["###2.1. Estimando las tasas de población y asesinatos\n"],"metadata":{"id":"Y9bBqMO5m3Nl"}},{"cell_type":"code","source":["estado[\"Population\"].mean()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6mtygnIFnBzp","executionInfo":{"status":"ok","timestamp":1741636299281,"user_tz":300,"elapsed":11,"user":{"displayName":"DANNA PAULETH LOPEZ ACOSTA","userId":"01609972287466563207"}},"outputId":"88dd96b9-0f11-425c-b4b6-70abedbba742"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["6162876.3"]},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["trim_mean(estado.Population,0.1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VvoBznvVnPl8","executionInfo":{"status":"ok","timestamp":1741636378322,"user_tz":300,"elapsed":23,"user":{"displayName":"DANNA PAULETH LOPEZ ACOSTA","userId":"01609972287466563207"}},"outputId":"556b2066-0842-4ed3-94ec-8385611e403e"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4783697.125"]},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["#Media ponderada de asesinatos\n","np.average(estado[\"Murder.Rate\"],weights=estado.Population)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HiRgOJnEoKkG","executionInfo":{"status":"ok","timestamp":1741636657288,"user_tz":300,"elapsed":18,"user":{"displayName":"DANNA PAULETH LOPEZ ACOSTA","userId":"01609972287466563207"}},"outputId":"6f9f8ed5-7dca-4292-ac18-52f3c24e53dd"},"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4.445833981123393"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["estado[\"Murder.Rate\"].plot.line()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"FwGTXaq2om8q","executionInfo":{"status":"ok","timestamp":1741636777580,"user_tz":300,"elapsed":188,"user":{"displayName":"DANNA PAULETH LOPEZ ACOSTA","userId":"01609972287466563207"}},"outputId":"f61e5a69-fb41-423f-99ed-e0808ae8ae8f"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":40},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["estado[\"Murder.Rate\"].plot.bar()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":451},"id":"KW3ew1ZgpSum","executionInfo":{"status":"ok","timestamp":1741636863652,"user_tz":300,"elapsed":180,"user":{"displayName":"DANNA PAULETH LOPEZ ACOSTA","userId":"01609972287466563207"}},"outputId":"65362ca9-fc6c-4261-9ed1-7cf4d40ade33"},"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":41},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["estado[\"Murder.Rate\"].plot.bar(color=\"pink\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":451},"id":"yjV8AlEup0d4","executionInfo":{"status":"ok","timestamp":1741637056174,"user_tz":300,"elapsed":465,"user":{"displayName":"DANNA PAULETH LOPEZ ACOSTA","userId":"01609972287466563207"}},"outputId":"739fff43-d22f-4b7f-8d4d-dfb476ad6291"},"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":44},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["ax=(estado.Population/1_000_000).plot.hist(figsize=(4,4), color=\"lightcoral\")\n","ax.set_xlabel(\"Población [millones]\")\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":406},"id":"4lc4kpavqLcf","executionInfo":{"status":"ok","timestamp":1741637506760,"user_tz":300,"elapsed":338,"user":{"displayName":"DANNA PAULETH LOPEZ ACOSTA","userId":"01609972287466563207"}},"outputId":"64554252-8e08-4ace-f643-425186484829"},"execution_count":52,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 400x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["ax = estado[\"Murder.Rate\"].plot.hist(figsize=(4,4), color=\"lightcoral\")\n","ax.set_xlabel(\"Tasa de homicidios\")\n","\n","plt.tight_layout()\n","plt.show()\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"_IM21qgArlPO","executionInfo":{"status":"ok","timestamp":1741637646355,"user_tz":300,"elapsed":241,"user":{"displayName":"DANNA PAULETH LOPEZ ACOSTA","userId":"01609972287466563207"}},"outputId":"461c4f6e-aed8-4955-f181-efa7f90f741e"},"execution_count":58,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 400x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"code","source":["analisis=estado.head()\n","g=sns.FacetGrid(analisis,col=\"State\")\n","g.map(sns.distplot,\"Murder.Rate\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"ZPoUtRbtsZCq","executionInfo":{"status":"ok","timestamp":1741637956763,"user_tz":300,"elapsed":1522,"user":{"displayName":"DANNA PAULETH LOPEZ ACOSTA","userId":"01609972287466563207"}},"outputId":"0647643c-482c-4d36-9ef4-a42aaa3d67d7"},"execution_count":61,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/seaborn/axisgrid.py:854: UserWarning: \n","\n","`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n","\n","Please adapt your code to use either `displot` (a figure-level function with\n","similar flexibility) or `histplot` (an axes-level function for histograms).\n","\n","For a guide to updating your code to use the new functions, please see\n","https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n","\n","  func(*plot_args, **plot_kwargs)\n","/usr/local/lib/python3.11/dist-packages/seaborn/distributions.py:2496: UserWarning: Dataset has 0 variance; skipping density estimate. Pass `warn_singular=False` to disable this warning.\n","  kdeplot(**{axis: a}, ax=ax, color=kde_color, **kde_kws)\n","/usr/local/lib/python3.11/dist-packages/seaborn/axisgrid.py:854: UserWarning: \n","\n","`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n","\n","Please adapt your code to use either `displot` (a figure-level function with\n","similar flexibility) or `histplot` (an axes-level function for histograms).\n","\n","For a guide to updating your code to use the new functions, please see\n","https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n","\n","  func(*plot_args, **plot_kwargs)\n","/usr/local/lib/python3.11/dist-packages/seaborn/distributions.py:2496: UserWarning: Dataset has 0 variance; skipping density estimate. Pass `warn_singular=False` to disable this warning.\n","  kdeplot(**{axis: a}, ax=ax, color=kde_color, **kde_kws)\n","/usr/local/lib/python3.11/dist-packages/seaborn/axisgrid.py:854: UserWarning: \n","\n","`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n","\n","Please adapt your code to use either `displot` (a figure-level function with\n","similar flexibility) or `histplot` (an axes-level function for histograms).\n","\n","For a guide to updating your code to use the new functions, please see\n","https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n","\n","  func(*plot_args, **plot_kwargs)\n","/usr/local/lib/python3.11/dist-packages/seaborn/distributions.py:2496: UserWarning: Dataset has 0 variance; skipping density estimate. Pass `warn_singular=False` to disable this warning.\n","  kdeplot(**{axis: a}, ax=ax, color=kde_color, **kde_kws)\n","/usr/local/lib/python3.11/dist-packages/seaborn/axisgrid.py:854: UserWarning: \n","\n","`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n","\n","Please adapt your code to use either `displot` (a figure-level function with\n","similar flexibility) or `histplot` (an axes-level function for histograms).\n","\n","For a guide to updating your code to use the new functions, please see\n","https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n","\n","  func(*plot_args, **plot_kwargs)\n","/usr/local/lib/python3.11/dist-packages/seaborn/distributions.py:2496: UserWarning: Dataset has 0 variance; skipping density estimate. Pass `warn_singular=False` to disable this warning.\n","  kdeplot(**{axis: a}, ax=ax, color=kde_color, **kde_kws)\n","/usr/local/lib/python3.11/dist-packages/seaborn/axisgrid.py:854: UserWarning: \n","\n","`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n","\n","Please adapt your code to use either `displot` (a figure-level function with\n","similar flexibility) or `histplot` (an axes-level function for histograms).\n","\n","For a guide to updating your code to use the new functions, please see\n","https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n","\n","  func(*plot_args, **plot_kwargs)\n","/usr/local/lib/python3.11/dist-packages/seaborn/distributions.py:2496: UserWarning: Dataset has 0 variance; skipping density estimate. Pass `warn_singular=False` to disable this warning.\n","  kdeplot(**{axis: a}, ax=ax, color=kde_color, **kde_kws)\n"]},{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x794a5cf60490>"]},"metadata":{},"execution_count":61},{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x300 with 5 Axes>"],"image/png":"\n"},"metadata":{}}]}]}